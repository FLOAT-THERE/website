//Posting Dislikes
function postDisikes(dislikes, uid) {
    customerURL = 'https://b9bdb0efc4f677ef3e699ea413280eb3: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@float-there.myshopify.com/admin/customers/';
    URL = customerURL + uid + '/metafields.json';
    print(URL);
    var idString = "";
    for (i in dislikes[i]) {
    	idString += i;
	idString += " ,";
    }
    var data = JSON.stringify({
            "namespace" : "window_shop",
            "key" : "dislike",
            "value" : "{\"Id\": \"" + idString,
            "value_type" : "json_string"
        });
        try {
	    let xhr = new XMLHttpRequest(); 
	    xhr.open("POST", url, true); 
	    xhr.setRequestHeader("Content-Type", "application/json");
	    //If there are no errors
	     xhr.onreadystatechange = function () { 
	    if (xhr.readyState === 4 && xhr.status === 200) { 
  
                    // Print received data from server 
                    result.innerHTML = this.responseText; 
  
                } 
            };
	    xhr.send(data); 
	} catch(err) {
	console.log('Error');
	}
        
}
//Posting Likes
function postLikes(likes, uid) {
    customerURL = 'https://b9bdb0efc4f677ef3e699ea413280eb3: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@float-there.myshopify.com/admin/customers/';
    URL = customerURL + uid + '/metafields.json';
    print(URL);
    var idString = "";
    for (i in likes[i]) {
    	idString += i;
	idString += " ,";
    }
    var data = JSON.stringify({
            "namespace" : "window_shop",
            "key" : "like",
            "value" : "{\"Id\": \"" + idString,
            "value_type" : "json_string"
        });
        try {
	    let xhr = new XMLHttpRequest(); 
	    xhr.open("POST", url, true); 
	    xhr.setRequestHeader("Content-Type", "application/json");
	    //If there are no errors
	     xhr.onreadystatechange = function () { 
	    if (xhr.readyState === 4 && xhr.status === 200) { 
  
                    // Print received data from server 
                    result.innerHTML = this.responseText; 
  
                } 
            };
	    xhr.send(data); 
	} catch(err) {
	console.log('Error');
	}
        
}

//Posting closet
function postCloset(closet, uid){
    customerURL = 'https://b9bdb0efc4f677ef3e699ea413280eb3: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@float-there.myshopify.com/admin/customers/';
    URL = customerURL + uid + '/metafields.json';
    print(URL);
    var data = JSON.stringify({
            "namespace" : "closet",
            "key" : "item" + str(i+1),
            "value" : "{\"handle\": \"" + closet[i][0] + "\"  , \"variant\": \"" + str(closet[i][1]) + "\"}",
            "value_type" : "json_string"
        });
        try {
	    let xhr = new XMLHttpRequest(); 
	    xhr.open("POST", url, true); 
	    xhr.setRequestHeader("Content-Type", "application/json");
	    //If there are no errors
	     xhr.onreadystatechange = function () { 
	    if (xhr.readyState === 4 && xhr.status === 200) { 
  
                    // Print received data from server 
                    result.innerHTML = this.responseText; 
  
                } 
            };
	    xhr.send(data); 
	} catch(err) {
	console.log('Error');
	}
        
}
//Get A product's information by its ID
function getProductById(id) {
   URL = 'https://b9bdb0efc4f677ef3e699ea413280eb3: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@float-there.myshopify.com/admin/api/2020-04/products/';
   URL = URL + id + '.json';
    try {
                let request = new XMLHttpRequest();
                request.open('GET', URL);
                request.send();
                 
                request.onload = () => {//document.write(request);
     									
                						document.write(request.status);
                                        if (request.status == 200) {     
                                        products = JSON.parse(request.response);
                                        } else {
                                       	document.write('testing');
                                     }
                                     }
          } catch(err) {
        	document.write("Error");
        }

}

//Retrieve metadata
function getMetadata(uid, field) {
let metadata = [];
	customerURL = 'https://b9bdb0efc4f677ef3e699ea413280eb3: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@float-there.myshopify.com/admin/customers/';
    URL = customerURL + uid + '/metafields.json';
    if (field == 'likes') {
	var urlEnd = 'key';
	} else if (field == 'closet') {
		var urlEnd = 'namespace';
	}
	URL = URL + '?field=' + urlEnd + ',value';
     try {
                let request = new XMLHttpRequest();
                request.open('GET', URL);
                request.send();
                request.onload = () => {console.log(request);
                                        if (request.status == 200) {     
                                            metadata = JSON.parse(request.response);
                                            return metadata;
                                        }
                                        }
    	} catch(err) {
        	console.log("error");
      }
                                      
 }


//RECOMMENDATION FUNCTION
function recommend(uid) {
let products = [];  // Array holding products for possible recommending.
let recArray = [];  // Array holding products ready to be sorted for recommendation
let compArray = [   //Array that the products are being compared to
  //Item compArray[0][1] keeps a tally of the number of items being added 
	['Tag:', 0],
  ['Active', 0], 
	['Adventure', 0],
	['Bachelorette', 0], 
	['Beach', 0],
	['Bold', 0],
	['Casual', 0],
	['Classic', 0],
	['Cozy', 0],
	['Dressy', 0],
	['Elegant', 0],
	['Flirty', 0],
 	['LA', 0],
	['Miami', 0], 
	['NYC', 0],
	['Sophisticated', 0],
	['Urban', 0],
	['Weekend', 0]
 ];

//Retrieves likes and counts how many times every tag occurs in the likes
let metadata = getMetadata(uid, 'likes');
//for(var x = 0; x < metadata.length; x++) {
if (metadata[x].key == 'likes') {
 compArray[0][1] ++;
 let likedProducts = metadata.values;
    for (i in likedProducts[x]) {
    	var myProduct = getProductById(i);
	for (j in myProduct.tags[x]) {
    	for (var y = 1; y < 17; y++) {
		if (i == compArray[y][0]) {
        	compArray[y][1] ++;
		}
	}
	}
  }
  }
//}
//Retrieves closeg and counts how many times every tag occurs in the closet
let otherMetaData = getMetadata(uid, 'closet');
for(var x = 0; x < otherMetaData.length; x++) {
if (otherMetaData[x].namespace == 'closet') {
 compArray[0][1] ++;
 var item = getProductById(otherMetaData[x].value);
   for (i in item[x].tags) {
 	 for (var y = 1; y < 17; y++) {
		if (i == compArray[y][0]) {
        	compArray[y][1] ++;
		}
	}
  }
}
 // END of section of code that will not work
	for (var z = 1; z < 17; z++) {	
		compArray[1][z] = compArray[1][z] / compArray[1][0];
	}
    
    
  
//PULLING PRODUCTS INTO AN ARRAY
//if it is easier, you can replace this with the bit you've written to pull the products
	URL = 'https://b9bdb0efc4f677ef3e699ea413280eb3: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@float-there.myshopify.com/admin/api/2020-04/products.json?limit=250';
   // URL = customerURL + uid + '/metafields.json';
    try {
                let request = new XMLHttpRequest();
                request.open('GET', URL);
                request.send();
                 
                request.onload = () => {//document.write(request);
     									
                						document.write(request.status);
                                        if (request.status == 200) {     
                                        products = JSON.parse(request.response);
                                        } else {
                                       	document.write('testing');
                                     }
                                     }
          } catch(err) {
        	document.write("Error");
        }
 
	for (var a = 0; a < products.length; a++) {
    	recArray[a][0] = products[a].id;
		for (var b = 0; b < 18; b++) {
			//var currentTag = currentTagOfString;
            for (i in products[a].tags) {
           	 if (i == compArray[b][0]) {
				recArray[a][1] = recArray[a][1] + compArray[b][1];
             	}
             }
			}
		}
	}
 
}


const merge = (arr1, arr2) => {
  let sorted = [];

  while (arr1.length && arr2.length) {
    if (arr1[0][1] < arr2[0][1]) sorted.push(arr1.shift());
    else sorted.push(arr2.shift());
  };

  return sorted.concat(arr1.slice().concat(arr2.slice()));
};

//Call mergesort to sort array once it is created.
const mergeSort = arr => {
  if (arr.length <= 1) return arr;
  let mid = Math.floor(arr.length / 2),
      left = mergeSort(arr.slice(0, mid)),
      right = mergeSort(arr.slice(mid));

  return merge(left, right);
};


